{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","className","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","editTodo","map","todo","index","isComplete","onClick","TodoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iMA2DeA,MAxDf,SAAkBC,GACd,MAA0BC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IAAnE,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAWC,iBAAO,MAExBC,qBAAU,WACNF,EAASG,QAAQC,WAGrB,IAAMC,EAAe,SAAAC,GACjBP,EAASO,EAAEC,OAAOV,QAEhBW,EAAe,SAAAF,GACjBA,EAAEG,iBAEFf,EAAMgB,SAAS,CACXC,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMjB,IAEVC,EAAS,KAEb,OACI,8BACI,sBAAMW,SAAUF,EAAcQ,UAAU,YAAxC,SACKtB,EAAME,KACH,qCACI,uBAAOqB,KAAK,OACRC,YAAY,mBACZrB,MAAOC,EACPqB,KAAK,OACLH,UAAU,kBACVI,SAAUf,EACVgB,IAAKrB,IACT,wBAAQU,SAAUF,EAAcQ,UAAU,cAA1C,uBAIA,qCACI,uBAAOC,KAAK,OACRC,YAAY,kBACZrB,MAAOC,EACPqB,KAAK,OACLH,UAAU,aACVI,SAAUf,EACVgB,IAAKrB,IACT,wBAAQU,SAAUF,EAAcQ,UAAU,cAA1C,8B,sBCLbM,MAnCf,YAA+D,IAA/CC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,WAC7C,EAAyB/B,mBAAS,CAC9BgB,GAAI,KACJd,MAAO,KAFX,mBAAOD,EAAP,KAAa+B,EAAb,KAaA,OAAI/B,EAAKe,GACE,cAAC,EAAD,CAAUf,KAAMA,EAAMc,SATZ,SAAAb,GACjB6B,EAAW9B,EAAKe,GAAId,GACpB8B,EAAS,CACLhB,GAAI,KACJd,MAAO,QAQR0B,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACb,sBACId,UAAWa,EAAKE,WAAa,oBAAqB,WADtD,UAGQ,qBAAmBC,QAAS,kBAAMR,EAAaK,EAAKlB,KAApD,SACKkB,EAAKd,MADAc,EAAKlB,IAGf,sBAAKK,UAAU,QAAf,UACI,cAAC,IAAD,CACIgB,QAAS,kBAAMP,EAAWI,EAAKlB,KAAKK,UAAU,gBAClD,cAAC,IAAD,CACIgB,QAAS,kBAAML,EAAS,CAAEhB,GAAIkB,EAAKlB,GAAId,MAAOgC,EAAKd,QAASC,UAAU,mBAR7Ec,OCuBFG,MA/Cf,WACI,MAA0BtC,mBAAS,IAAnC,mBAAO4B,EAAP,KAAcW,EAAd,KAoCA,OACI,gCACI,4DACA,cAAC,EAAD,CAAUxB,SArCF,SAAAmB,GACZ,GAAIA,EAAKd,OAAQ,QAAQoB,KAAKN,EAAKd,MAAnC,CAIA,IAAMqB,EAAQ,CAAIP,GAAJ,mBAAaN,IAE3BW,EAASE,OA+BL,cAAC,EAAD,CAAMb,MAAOA,EAAOC,aAdP,SAAAb,GACjB,IAAI0B,EAAed,EAAMK,KAAI,SAAAC,GAIzB,OAHIA,EAAKlB,KAAOA,IACZkB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXK,EAASG,IAQDZ,WArBO,SAAAd,GACf,IAAM2B,EAAY,YAAIf,GAAOgB,QAAO,SAAAV,GAAI,OAAIA,EAAKlB,KAAOA,KAExDuB,EAASI,IAkBuBZ,WA7BjB,SAACc,EAAQC,GACpBA,EAAS1B,OAAQ,QAAQoB,KAAKM,EAAS1B,OAI3CmB,GAAS,SAAAQ,GAAI,OAAIA,EAAKd,KAAI,SAAAe,GAAI,OAAKA,EAAKhC,KAAO6B,EAASC,EAAWE,eCT5DC,MARf,WACE,OACE,qBAAK5B,UAAU,WAAf,SACE,cAAC,EAAD,OCHN6B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7b9618fe.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\n\r\n\r\nfunction TodoForm(props) {\r\n    const [input, setInput] = useState(props.edit ? props.edit.value : '');\r\n    const inputRef = useRef(null)\r\n\r\n    useEffect(() => {\r\n        inputRef.current.focus()\r\n    });\r\n\r\n    const handleChange = e => {\r\n        setInput(e.target.value);\r\n    };\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() * 10000),\r\n            text: input\r\n        });\r\n        setInput('');\r\n    };\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit} className=\"todo-form\">\r\n                {props.edit ? (\r\n                    <>\r\n                        <input type=\"text\"\r\n                            placeholder=\"Edit a todo item\"\r\n                            value={input}\r\n                            name=\"text\"\r\n                            className=\"todo-input edit\"\r\n                            onChange={handleChange}\r\n                            ref={inputRef} />\r\n                        <button onSubmit={handleSubmit} className=\"todo-button\">Update</button>\r\n                    </>\r\n                ) :\r\n                    (\r\n                        <>\r\n                            <input type=\"text\"\r\n                                placeholder=\"Add a todo item\"\r\n                                value={input}\r\n                                name=\"text\"\r\n                                className=\"todo-input\"\r\n                                onChange={handleChange}\r\n                                ref={inputRef} />\r\n                            <button onSubmit={handleSubmit} className=\"todo-button\">Add todo</button>\r\n                        </>\r\n                    )\r\n                }\r\n\r\n\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, {useState} from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport TodoList from './TodoList'\r\nimport { RiCloseCircleLine } from 'react-icons/ri'\r\nimport { TiEdit } from 'react-icons/ti'\r\n\r\n\r\nfunction Todo({ todos, completeTodo, removeTodo, updateTodo }){\r\n    const [edit, editTodo] = useState({\r\n        id: null,\r\n        value: ''\r\n    });\r\n\r\n    const submitUpdate = value => {\r\n        updateTodo(edit.id, value)\r\n        editTodo({\r\n            id: null,\r\n            value: ''\r\n        })\r\n    }\r\n\r\n    if (edit.id) {\r\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />;\r\n    }\r\n\r\n    return todos.map((todo, index) => (\r\n        <div \r\n            className={todo.isComplete ? 'todo-row complete': 'todo-row'} \r\n            key={index}>\r\n                <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n                    {todo.text}\r\n                </div>\r\n                <div className=\"icons\">\r\n                    <RiCloseCircleLine\r\n                        onClick={() => removeTodo(todo.id)} className=\"delete-icon\" />\r\n                    <TiEdit\r\n                        onClick={() => editTodo({ id: todo.id, value: todo.text })} className=\"edit-icon\" />\r\n                </div>\r\n        </div>\r\n    ))\r\n}\r\n\r\nexport default Todo\r\n","import React, {useState} from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport Todo from './Todo';\r\n\r\nfunction TodoList() {\r\n    const [todos, setTodos] = useState([]);\r\n\r\n    const addTodo = todo => {\r\n        if(!todo.text || /^\\s*$/.test(todo.text)) {\r\n            return;\r\n        }\r\n        \r\n        const newTodos = [todo, ...todos]\r\n\r\n        setTodos(newTodos)\r\n    };\r\n\r\n    const updateTodo = (todoId, newValue) => {\r\n        if(!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n            return;\r\n        }\r\n\r\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\r\n    };\r\n\r\n    const removeTodo = id => {\r\n        const removeArr = [...todos].filter(todo => todo.id !== id)\r\n\r\n        setTodos(removeArr);\r\n    };\r\n\r\n    const completeTodo = id => {\r\n        let updatedTodos = todos.map(todo => {\r\n            if (todo.id === id) {\r\n                todo.isComplete = !todo.isComplete;\r\n            }\r\n            return todo;\r\n        });\r\n        setTodos(updatedTodos);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>What's the task for Today?</h1>\r\n            <TodoForm onSubmit={addTodo} />\r\n            <Todo todos={todos} completeTodo={completeTodo} \r\n                removeTodo={removeTodo} updateTodo={updateTodo} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;\r\n","import react from 'react';\nimport './App.css';\nimport TodoForm from './components/TodoForm';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}